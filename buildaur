#!/usr/bin/env bash
. /etc/buildaur/buildaur.conf
black=($(cat /usr/share/buildaur/blacklist))
bold=$(tput bold)
normal=$(tput sgr0)


options(){
	installindex=i
	if [[ $(echo $1 | egrep n) != "" ]]
	then
		ask=--noconfirm
	fi
	if [[ $(echo $1 | egrep spgp) != "" ]]
	then
		pgp=--skippgpcheck
	fi
	if [[ $(echo $1 | egrep c) != "" ]]
	then
		buildchroot=yes
		if [[ $(uname -m) = armv7l ]]
		then
			echo ":: Warning: You may run into some issues using chroots on ALARM!"
		fi
	fi
	if [[ $(echo $1 | egrep di) != "" ]]
	then
		installindex=""
	fi
}

netcheck(){
	if [[ $net != true ]]
	then
		if [[ $(ping -c 1 google.de >/dev/null 2>/dev/null ; echo $?) != 0 ]]
		then
			echo "ERROR: Network is not reachable!"
			exit 1
		fi
		net=true
	fi
}

info(){
	netcheck
	while [[ $# -gt 1 ]]
	do
		key=$2
		res=$(curl -s 'https://aur.archlinux.org/rpc/?v=5&type=multiinfo&arg[]='$key'')
		remoteinfo=$(echo $res | cut -d'"' -f30)
		ver=$(pacman -Q $key 2>/dev/null | cut -d" " -f2 | xargs)
		if [[ $(echo $res | cut -d'"' -f9) = ":0," ]]
		then
			if [[ $all = true ]]
			then
				echo "Warning: $key ist not in the AUR!"
			else
				echo "ERROR: $key ist not in the AUR!"
				exit 2
			fi
		fi
		if [[ $ver = "" ]]
		then
			ver="--- "
		fi
		echo "  "$key $(curl -s 'https://aur.archlinux.org/rpc/?v=5&type=multiinfo&arg[]='$key'' | cut -d'"' -f26) "(local: $ver)"
		if [[ $remoteinfo = "" ]]
		then
			echo "     Warning: AUR does not provide information about this package!"
		else
			echo "     "$remoteinfo
		fi
		shift
	done
}

search(){
	netcheck
	while [[ $# -gt 1 ]]
	do
		key=$2
		echo ":: Checking AUR packages..."
		res=$(curl -s 'https://aur.archlinux.org/rpc/?v=5&type=search&arg='$key'')
		resultcount=$(echo $res | cut -d'"' -f9 | sed -e 's/://g' | sed -e 's/,//g')
		echo "  $resultcount packages found"
  	echo ":: Giving out package infos..."
		counter=0
		while [[ $counter -lt $resultcount ]]
		do
			cutted=$(echo $res | cut -d{ -f$(expr $counter + 3))
			name=$(echo $cutted | cut -d'"' -f6)
			ver=$(pacman -Q $name 2>/dev/null | cut -d" " -f2 | xargs)
			remoteinfo=$(echo $cutted | cut -d'"' -f20)
			if [[ $name = "" ]] || [[ $ver = "" ]]
			then
			ver="--- "
			fi
			echo "  "$name $(echo $cutted | cut -d'"' -f16) "(local: $ver)"
			if [[ $remoteinfo = "" ]]
			then
				echo "     Warning: AUR does not provide information about this package!"
			else
				echo "     "$remoteinfo
			fi
			counter=$(expr $counter + 1)
		done
		shift
	done
}

depts(){
	. ./PKGBUILD
	aurdeps=()
	depcount=1
	depmaxcount=$(echo ${depends[@]} | wc -w)
	echo ":: Checking for dependecies..."
	echo "  ($depmaxcount) Packages: ${depends[@]}"
	while [[ $depcount -le $depmaxcount ]]
	do
	if [[ $(pacman -Qq ${depends[$depcount]} 2>/dev/null) = "" ]]
	then
		if [[ $(sudo pacman -Sqs | egrep -xE ${depends[$depcount]}) = ${depends[$depcount]} ]]
		then
			printf 2 >> /dev/null
		else
			aurdeps=(${aurdeps[@]} ${depends[$depcount]})
		fi
	fi
	depcount=$(expr $depcount + 1)
	done
	if [[ ${aurdeps[@]} != "" ]]
	then
		install ${aurdeps[@]}
	fi
}

install(){
	if [[ $@ = "" ]]
	then
		echo " Nothing to do"
		exit 0
	fi
	netcheck
	sudo pacman -Sy
	installcount=1
	preinst $@
}

preinst(){
	echo ":: Checking packages..."
	installpac=()
	while [[ $# -gt 0 ]]
	do
		key=$1
		if [[ $mode != asp ]] && [[ $mode != url ]]
		then
			ver=$(pacman -Q $key 2>/dev/null | cut -d" " -f2 | xargs)
			res=$(curl -s 'https://aur.archlinux.org/rpc/?v=5&type=multiinfo&arg[]='$key'')
			remotever=$(echo $res | cut -d'"' -f26)
			if [[ $(echo $res | cut -d'"' -f9) = ":0," ]]
			then
				echo "ERROR: $key ist not in the AUR!"
				exit 1
			fi
			if [[ $ver = "" ]]
			then
				printf ""
			elif [[ $ver = $remotever ]]
			then
				echo "Warning: $key-$ver is allready on $remotever -- reinstalling"
			else
				echo "Info: $key-$ver will be updated to $remotever!"
			fi
			if [[ $(echo $res | cut -d'"' -f41) != :null, ]]
			then
				echo  "Warning: $key is flagged out of date!"
			fi
		fi
		installpac=(${installpac[@]} $key)
		shift
	done
	echo ""
	echo "Packages ($(echo ${installpac[@]} | wc -w)): ${installpac[@]}"
	echo ""
	if [[ $ask = "--noconfirm" ]]
	then
		ans=y
	else
		echo ":: Continnue installation? [Y/n]"
		read ans
	fi
	if [[ $ans == y ]] || [[ $ans == "" ]]
	then
		realinst ${installpac[@]}
	fi
}

realinst(){
	while [[ $# -gt 0 ]]
	do
		echo ""
		if [[ $mode = asp ]] || [[ $mode = url ]]
		then
			echo "($installcount/$(expr $# + $installcount - 1)) Installing ${bold}$1${normal} ..."
		else
			echo "($installcount/$(expr $# + $installcount - 1)) Installing ${bold}$1-$remotever${normal} ..."
		fi
		mkdir -p ~/.cache/buildaur/build
		cd ~/.cache/buildaur/build
		rm -rf  ~/.cache/buildaur/build/$1
		rm -rf  ~/.cache/buildaur/build/urlbuild
		if [[ $mode = asp ]]
		then
			echo ":: Exporting package..."
			asp export $1 2>/dev/null
			cd ~/.cache/buildaur/build/$1
			if [[ $? != 0 ]]
			then
				echo "ERROR: $1 not found!"
				exit 2
			fi
		else
			echo ":: Clonig git repository..."
			if [[ $mode = url ]]
			then
				git clone $1 ~/.cache/buildaur/build/urlbuild
				cd ~/.cache/buildaur/build/urlbuild
			else
				git clone https://aur.archlinux.org/$1.git ~/.cache/buildaur/build/$1
				cd ~/.cache/buildaur/build/$1
			fi
		fi
		if [[ $ask = "--noconfirm" ]]
		then
			ans=n
		else
			echo ":: Edit the PKGBUILD? [y/N]"
			read ans
		fi
		if [[ $ans == n ]] || [[ $ans == "" ]]
		then
			echo ":: Going on..."
		else
			nano ./PKGBUILD
		fi
		echo ":: Running prehooks..."
		prehooks
		depts
		if [[ $mode = url ]]
		then
			cd ~/.cache/buildaur/build/urlbuild
		else
			cd ~/.cache/buildaur/build/$1
		fi
		if [[ $buildchroot = yes ]]
		then
			if [[ $CHROOT = "" ]]
			then
				echo "ERROR: CHROOT variable is not defined! Use '--make-chroot' to create a chroot first"
				exit 1
			fi
			echo ":: Updating chrootpackages..."
			arch-nspawn $CHROOT/root pacman -Syu $ask
			echo ":: Making and installing the package..."
			makechrootpkg -c -r $CHROOT -- -sf $ask $pgp
			. ./PKGBUILD
			if [[ $installindex = i ]]
			then
				sudo pacman -U $ask ./${pkgname}-${pkgver}-${pkgrel}-${arch}.pkg.tar.xz
			fi
		else
			echo ":: Making and installing the package..."
			makepkg -s${installindex}f $ask $pgp
		fi
		if [[ $? = 0 ]]
		then
			echo ":: Running posthooks..."
			posthooks
			if [[ $install = "" ]]
			then
				echo ":: Info: Succesfully created package in $(pwd)!"
			else
				echo ":: Installation finished!"
			fi
		else
			echo ":: ERROR: Package installation FAILED!"
			errorcount=$(expr $errorcount + 1)
		fi
		shift
		installcount=$(expr $installcount + 1)
	done
}

update(){
	netcheck
	echo ":: Checking installed AUR packages..."
	echo "  $(pacman -Qqm | wc -l) packages are curently installed from the AUR!"
	echo ":: Checking for outdated packages..."
	willinst=()
	errorcount=0
	maxcount=$(expr $# - 1)
	count=1
	while [[ $# -gt 1 ]]
	do
		key=$2
		ver=$(pacman -Q $key | cut -d" " -f2 | xargs)
		res=$(curl -s 'https://aur.archlinux.org/rpc/?v=5&type=multiinfo&arg[]='$key'')
		remotever=$(echo $res | cut -d'"' -f26)
		if [[ $(echo ${black[*]} | sed -e 's/ /\n/g'| egrep -xE $key) = "$key" ]]
		then
			echo "($count/$maxcount) $key-$ver is out of date! $remotever is available! But it's on the blacklist and will not be updated!"
		else
			if [[ $(echo $res | cut -d'"' -f9) = ":0," ]]
			then
				echo "($count/$maxcount) $key is not in the AUR!"
			else
				if [[ $remotever = "$ver" ]]
				then
					echo "($count/$maxcount) $key-$ver is up to date"
				else
					echo "($count/$maxcount) $key-$ver is out of date! $remotever is available!"
					if [[ $ask = "--noconfirm" ]]
					then
						ans=y
					else
						echo ":: Should it be updated? [Y/n]"
						read ans
					fi
					if [[ $ans == y ]] || [[ $ans == "" ]]
					then
						willinst=(${willinst[@]} $key)
					fi
				fi
			fi
		fi
		count=$(expr $count + 1)
		shift
	done
	echo ""
	install ${willinst[@]}
	if [[ $errorcount = 0 ]]
	then
		echo " No errors accured"
	else
		echo " $errorcount error(s) accured!"
	fi
}

prehooks(){
	prehooks=($(ls /etc/buildaur/prehooks))
	hookcount=0
	while [[ $hookcount -lt $(echo ${prehooks[@]} | wc -w) ]]
	do
		echo " ${prehooks[$hookcount]}..."
		/etc/buildaur/prehooks/${prehooks[$hookcount]} -u
		hookcount=$(expr $hookcount + 1)
	done
}

posthooks(){
	posthooks=($(ls /etc/buildaur/posthooks))
	hookcount=0
	while [[ $hookcount -lt $(echo ${posthooks[@]} | wc -w) ]]
	do
		echo " ${posthooks[$hookcount]}..."
		/etc/buildaur/posthooks/${posthooks[$hookcount]} -u
		hookcount=$(expr $hookcount + 1)
	done
}

listhooks(){
	echo "Prehooks:"
	prehooks=($(ls /etc/buildaur/prehooks))
	hookcount=0
	while [[ $hookcount -lt $(echo ${prehooks[@]} | wc -w) ]]
	do
		. /etc/buildaur/prehooks/${prehooks[$hookcount]}
		echo " ${prehooks[$hookcount]}"
		echo "  $desc"
		hookcount=$(expr $hookcount + 1)
	done
	echo "Posthooks:"
	posthooks=($(ls /etc/buildaur/posthooks))
	hookcount=0
	while [[ $hookcount -lt $(echo ${posthooks[@]} | wc -w) ]]
	do
		. /etc/buildaur/posthooks/${posthooks[$hookcount]}
		echo " ${posthooks[$hookcount]}"
		echo "  $desc"
		hookcount=$(expr $hookcount + 1)
	done
	echo "Deactivated hooks:"
	hooks=($(ls /etc/buildaur/hooks))
	hookcount=0
	while [[ $hookcount -lt $(echo ${hooks[@]} | wc -w) ]]
	do
		. /etc/buildaur/hooks/${hooks[$hookcount]}
		echo " ${hooks[$hookcount]}"
		echo "  $desc"
		hookcount=$(expr $hookcount + 1)
	done
}

activate(){
	. /etc/buildaur/hooks/$@ 2>/dev/null
	sudo mv /etc/buildaur/hooks/$@ /etc/buildaur/${type}hooks/ 2>/dev/null
	if [[ $? = 0 ]]
	then
		echo ":: Finished!"
	else
		echo ":: Failed! $@ is not available!"
		exit 1
	fi
}

deactivate(){
	. /etc/buildaur/prehooks/$@ 2>/dev/null
	. /etc/buildaur/posthooks/$@ 2>/dev/null
	sudo mv /etc/buildaur/${type}hooks/$@ /etc/buildaur/hooks/ 2>/dev/null
	if [[ $? = 0 ]]
	then
		echo ":: Finished!"
	else
		echo ":: Failed! $@ is not available!"
		exit 1
	fi
}

hookhelp(){
	echo "Help-dialog for hooks"
	echo ""
	echo "  Hooks are skripts that run before and after the packagebuild."
	echo "  They are made to for example modify the PKGBUILD"
	echo "  All hooks are stored in /etc/buildaur/hooks"
	echo "  In /etc/buildaur/prehooks are the hooks stored wich run before the packagebuild"
	echo "  and in /etc/buildaur/posthooks those wich run after the packagebuild."
	echo "  A hook always contains a 'type' (pre oder post) and a 'desc' variable."
	echo "  It also contains an if-function wich contains the modifications for the PKGBUILD and so on"
	echo "  See /etc/buildaur/prehooks/1-arm-archfix as an example."
}

help(){
	echo "buildaur - An AUR helper"
	echo "Usage: $0 <option> <string>"
	echo "   General options:"
	echo "      -S                : Installs a package"
	echo "      -R                : Removes a package"
	echo "      -Q                : Lists installed packages or searches for ones in the AUR"
	echo "      -Qs               : Search the AUR"
	echo "      -Syu              : Updates all AUR packages"
	echo "      -url              : Installs a package from a given git-repository"
	echo "      -asp              : Builds a package from source using asp (usefull for archlinux arm)"
	echo "      --clear           : Cleanes build dir"
	echo "      -v|--version      : Displays version of this program"
	echo "      -l|--license      : Displays license of this program"
	echo "      --make-chroot     : Creates a chroot dir which can be used for building packages"
	echo ""
	echo "   Additional options for -S,-R,-Syu,-asp:"
	echo "      n                 : Doesn't ask questions"
	echo "      spgp              : Skips pgp checks of sourcecode"
	echo "      c                 : Builds the package in a clean chroot (you may run into some problems using this on archlinux arm!)"
	echo ""
	echo "   Hookoptions:"
	echo "      --listhooks       : Lists all available and installed hooks"
	echo "      --hook-activate   : Activates a hook"
  echo "      --hook-deactivate : Deactivates a hook"
	echo ""
	echo "   Help options:"
	echo "      -h|--help         : Displays this help-dialog"
	echo "      --help-hooks      : Displays help-dialog for hooks"
}

case $1 in
	-S | -Sn* | -Sspgp* | -Sc* | -Sdi* )
		options $@
		shift
		install $@
		exit 0
	;;
	-url*)
		options $@
		shift
		mode=url
		install $@
		exit 0
	;;
	-asp*)
		options $@
		shift
		mode=asp
		install $@
		exit 0
	;;
	-Q)
		if [[ $2 = "" ]]
		then
			echo ":: Checking installed AUR packages..."
			echo "  $(pacman -Qqm | wc -l) packages are curently installed from the AUR!"
			echo ":: Giving out package infos..."
			all=true
			info -t $(pacman -Qqm)
		else
			info $@
		fi
		exit 0
	;;
	-Qs)
		if [[ $2 = "" ]]
		then
			echo "ERROR: No search subject given!"
			exit 2
		else
			search $@
		fi
		exit 0
	;;
	-R)
		sudo pacman $@
		exit 0
	;;
	-Rn)
		sudo pacman --noconfirm $@
		exit 0
	;;
	-Syu*)
		options $@
		update -t $(pacman -Qqm)
		exit 0
	;;
	--help | -h)
		help
		exit 0
	;;
	-v | --version)
		pacman -Q buildaur | cut -d" " -f2 | xargs
		exit 0
	;;
	-l | --license)
		less /usr/share/licenses/buildaur/LICENSE
		exit 0
	;;
	--clear)
		echo ":: Cleaning builddir..."
		echo "  $(du -hcs ~/.cache/buildaur/build | xargs | awk {'print $1'})B will be removed!"
		rm -rf ~/.cache/buildaur/build/*
		echo ":: Done!"
		exit 0
	;;
	--listhooks)
		listhooks
		exit 0
	;;
	--hook-activate)
		activate $2
		exit 0
	;;
	--hook-deactivate)
		deactivate $2
		exit 0
	;;
	--help-hooks)
		hookhelp
		exit 0
	;;
	--make-chroot)
		echo ":: Creating a chrootdir"
		sudo rm -rf ~/chroot 2>/dev/null
		mkdir ~/chroot
		export CHROOT=$HOME/chroot
		mkarchroot $CHROOT/root base-devel
		echo "export CHROOT=$HOME/chroot" >> $HOME/.bashrc
		exit 0
	;;
	*)
		if [[ $1 = "" ]]
		then
			echo ":: ERROR: No options are given! Try --help to see all options!"
			exit 2
		else
			# give an error if the option in unknown
			echo ":: ERROR: '$@' is no known option! Try --help to see all options!"
			exit 2
		fi
	;;
esac
